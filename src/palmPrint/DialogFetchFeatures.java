package palmPrint;

import JavaLib.LoadForm;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;

public class DialogFetchFeatures extends javax.swing.JDialog {

    public boolean ok;
    public int data[][];
    public int cx, cy;
    
    int windowHistRadius = 15;
    
    BufferedImage biIn, biOut;
    Graphics2D g2dIn, g2dOut;
    int ww, hh;
    int inPixels[][], tempPixels[][], histPixels[][], outPixels[][];
    MainForm parent;

    /**
     * Creates new form MainMenu
     */
    public DialogFetchFeatures(MainForm parent) {
        super(parent,true);
        
        initComponents();
        Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(sd.width / 2 - this.getWidth() / 2, sd.height / 2 - this.getHeight() / 2);

        this.parent = parent;
        
        ww = 320;
        hh = 240;
        biIn = new BufferedImage(ww, hh, BufferedImage.TYPE_INT_RGB);
        g2dIn = biIn.createGraphics();
        jLabelIn.setIcon(new ImageIcon(biIn));

        biOut = new BufferedImage(ww, hh, BufferedImage.TYPE_INT_RGB);
        g2dOut = biOut.createGraphics();        
        jLabelOut.setIcon(new ImageIcon(biOut));
        
        inPixels = new int[hh][ww];
        tempPixels = new int[hh][ww];
        outPixels = new int[hh][ww];
        histPixels = new int[hh][ww];
        

        ok = false;
        data = null;
        cx = cy = -1;
    }
    
    public void reset() {
        g2dIn.clearRect(0, 0, ww, hh);
        jLabelIn.repaint();
        g2dOut.clearRect(0, 0, ww, hh);
        jLabelOut.repaint();
        
        data = null;
        cx = cy = -1;
        ok = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabelIn = new javax.swing.JLabel();

        new LoadForm();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabelOut = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PALM PRINT FEATURE EXTRACTION");
        jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabelIn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagePack/back320x240.png"))); // NOI18N
        jLabelIn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelInMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jLabelIn);

        jLabelOut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagePack/back320x240.png"))); // NOI18N
        jLabelOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelOutMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jLabelOut);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("CANCEL");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton15.setText("OK");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setText("Capture Image and Process");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton15))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton15, jButton3});

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 20, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        ok = false;
        setVisible(false);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabelOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelOutMouseClicked

    }//GEN-LAST:event_jLabelOutMouseClicked

    private void jLabelInMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelInMouseClicked

        

    }//GEN-LAST:event_jLabelInMouseClicked

    public double getM(int xOrder, int yOrder) {
        double m = 0;
        for(int y=windowHistRadius;y<hh-windowHistRadius;y++) {
            for(int x=windowHistRadius;x<ww-windowHistRadius;x++) {
                int pix = 0;
                if((tempPixels[y][x] & 0xFF) < 30) {
                    pix = 1;
                }else {
                    pix = 0;
                } 
                
                m += Math.pow(x,xOrder) * Math.pow(y, yOrder) * pix;
            }
        }
        return m;
    }
    
    
    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed

        ok = true;
        if(data==null) {
            ok = false;
        }
        setVisible(false);
        
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        //capturing image and showing on jlabelin
        SnapCapturer sp = new SnapCapturer(parent, biIn);
        sp.setVisible(true);
        jLabelIn.repaint();
        sp.dispose();
        
        if(sp.ok) {
            // reading pixels
            for (int yy = 0; yy < hh; yy++) {
                for (int xx = 0; xx < ww; xx++) {
                    tempPixels[yy][xx] = biIn.getRGB(xx, yy);
                    inPixels[yy][xx] = biIn.getRGB(xx, yy);
                    //System.out.println(biIn.getRGB(xx, yy));
                    //int color_value = biIn.getRGB(xx, yy);
                    //int blue = color_value & 0xff;
                    //if(blue>210){
                     //biIn.setRGB(xx, yy, 200);
                    //inPixels[xx][yy] = ;
                    //}
                    //int green = (color_ & 0xff00) >> 8;
                    //int red = (color & 0xff0000) >> 16;
                    //System.out.println("blue color:" + blue );
                }
            }
            g2dOut.clearRect(0, 0, ww, hh);
            jLabelOut.repaint();
            
            //my code for processing
            
            int r, g, b, gs;
        //grayscale code
        for(int y=0;y<hh;y++) {
            for(int x=0;x<ww;x++) {
                gs = (inPixels[y][x] & 0xFF);                
                r = g = b = gs;
                tempPixels[y][x] = (r << 16) | (g << 8) | b;
                //System.out.println("pixel"+tempPixels[y][x]);
            }
        }
        
        applyBlur();
        
        intensityAndSaturationEnhanceFast(windowHistRadius);
        
        // updating histPixels
        for(int y=0;y<hh;y++) {
            for(int x=0;x<ww;x++) {
                histPixels[y][x] = tempPixels[y][x];
                biOut.setRGB(x, y, tempPixels[y][x]);
            }
        }
        
        data = tempPixels;
        
        // moment calculation for weighted center
        double m[][] = new double[4][4];
        for(int x=0;x<4;x++) {
            for(int y=0;y<4;y++) {
                m[x][y] = getM(x, y);
            }
        }
        cx = (int)(m[1][0]/m[0][0]);
        cy = (int)(m[0][1]/m[0][0]);
        
        System.out.println("CENTER POINT: [" + cx + "," + cy + "]");
        
        g2dOut.setColor(Color.red);
        g2dOut.drawLine(cx, 0, cx, hh);
        g2dOut.drawLine(0, cy, ww, cy);
        // done moment calculations
        
        // displaying threshold pixels
        for(int y=0;y<hh;y++) {
            for(int x=0;x<ww;x++) {
                if((tempPixels[y][x]&0xFF) < 30) {
                    biOut.setRGB(x, y, 0xFF);
                }
                
            }
        }
                //System.out.println(tempPixels[10][10]);
        
        jLabelOut.repaint();
            
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    public void applyBlur() {
        double gaussian[][] = GaussianKernel.calculateGaussian(5, 0.01);
        int col = 0, r, g, b, gs, sum;

        for (int y = 5; y < hh - 5; y++) {
            for (int x = 5; x < ww - 5; x++) {
                outPixels[y][x] = tempPixels[y][x];
            }
        }

        for (int y = 5; y < hh - 5; y++) {
            for (int x = 5; x < ww - 5; x++) {
                sum = 0;

                for (int yy = y - 2; yy <= y + 2; yy++) {
                    for (int xx = x - 2; xx <= x + 2; xx++) {
                        col = tempPixels[yy][xx];

                        // to take care of discarded pixels
                        gs = (tempPixels[yy][xx] >> 8) & 0xFF;
                        sum += (gs * gaussian[2 + (yy - y)][2 + (xx - x)]);
                    }
                }

                r = g = b = Math.min((int) sum, 255);
                outPixels[y][x] = (b | (g << 8) | (r << 16));
            }
        }

        for (int y = 0; y < hh; y++) {
            for (int x = 0; x < ww; x++) {
                tempPixels[y][x] = outPixels[y][x];
            }
        }
    }

    public void intensityAndSaturationEnhanceFast(int windowHistRadius) {
        int validPixelCount;
        long histogram[] = new long[256];
        long cummulative[] = new long[256];
        int intensity[] = new int[256];

        int r, g, b, gs, col;

        for (int y = 0; y < hh; y++) {
            for (int x = 0; x < ww; x++) {
                outPixels[y][x] = tempPixels[y][x];
            }
        }

        validPixelCount = 0;

        //getting valid pixel count
        for (int y = windowHistRadius; y < hh - windowHistRadius; y++) {
            for (int x = windowHistRadius; x < ww - windowHistRadius; x++) {

                if (x == windowHistRadius) {
                    validPixelCount = 0;
                    for (int i = 0; i < 256; i++) {
                        histogram[i] = 0;
                    }

                    for (int yy = y - windowHistRadius; yy <= y + windowHistRadius; yy++) {
                        for (int xx = x - windowHistRadius; xx <= x + windowHistRadius; xx++) {

                            validPixelCount++;
                            g = (tempPixels[yy][xx] >> 8) & 0xFF;
                            histogram[g]++;
                        }
                    }
                } else {
                    for (int yy = y - windowHistRadius; yy <= y + windowHistRadius; yy++) {
                        int xx = (x - windowHistRadius) - 1;
                            validPixelCount--;
                            g = (tempPixels[yy][xx] >> 8) & 0xFF;
                            histogram[g]--;
                            xx = x + windowHistRadius;
                            validPixelCount++;
                            g = (tempPixels[yy][xx] >> 8) & 0xFF;
                            histogram[g]++;
                    }
                }
                gs = (tempPixels[y][x] >> 8) & 0xFF;

                double alpha = 255.0 / (validPixelCount);
                cummulative[0] = histogram[0];
                for (int i = 1; i <= gs; i++) {
                    cummulative[i] = cummulative[i - 1] + histogram[i];
                }
                intensity[gs] = (int) (cummulative[gs] * alpha);

                //g = (tempPixels[y][x] >> 8) & 0xFF;
                r = g = b = intensity[gs];
                col = (r << 16) | (g << 8) | b;

                outPixels[y][x] = col;
            }
        }
        for (int y = 0; y < hh; y++) {
            for (int x = 0; x < ww; x++) {
                tempPixels[y][x] = outPixels[y][x];
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelIn;
    private javax.swing.JLabel jLabelOut;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
