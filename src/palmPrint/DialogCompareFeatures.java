package palmPrint;

import JavaLib.LoadForm;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import dataPack.*;

public class DialogCompareFeatures extends javax.swing.JDialog {

    public boolean ok;
    public int data[][];
    BufferedImage biIn, biOut, biOriginal;
    Graphics2D g2dIn, g2dOut;
    int ww, hh;
    int inPixels[][], tempPixels[][], histPixels[][], outPixels[][];
    MainForm parent;
    public int userIndex;
    public int cxCurr, cyCurr;
    int windowHistRadius = 15;

    /**
     * Creates new form MainMenu
     */
    public DialogCompareFeatures(MainForm parent) {
        super(parent, true);

        initComponents();
        Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(sd.width / 2 - this.getWidth() / 2, sd.height / 2 - this.getHeight() / 2);

        this.parent = parent;

        ww = 320;
        hh = 240;

        biIn = new BufferedImage(ww, hh, BufferedImage.TYPE_INT_RGB);
        g2dIn = biIn.createGraphics();
        jLabelIn.setIcon(new ImageIcon(biIn));

        biOut = new BufferedImage(ww, hh, BufferedImage.TYPE_INT_RGB);
        g2dOut = biOut.createGraphics();
        jLabelOut.setIcon(new ImageIcon(biOut));

        biOriginal = new BufferedImage(SingleUser.ww, SingleUser.hh, BufferedImage.TYPE_INT_RGB);
        jLabelOriginal.setIcon(new ImageIcon(biOriginal));

        inPixels = new int[hh][ww];
        tempPixels = new int[hh][ww];
        outPixels = new int[hh][ww];
        histPixels = new int[hh][ww];

        ok = false;
        data = null;
        userIndex = -1;

        cxCurr = -1;
        cyCurr = -1;

    }

    public void reset() {
        g2dIn.clearRect(0, 0, ww, hh);
        jLabelIn.repaint();

        g2dOut.clearRect(0, 0, ww, hh);
        jLabelOut.repaint();

        biOriginal.createGraphics().clearRect(0, 0, ww, hh);
        jLabelOriginal.repaint();

        data = null;
        ok = false;
        userIndex = -1;

        cxCurr = -1;
        cyCurr = -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabelOriginal = new javax.swing.JLabel();

        new LoadForm();
        jLabelIn = new javax.swing.JLabel();

        new LoadForm();
        jLabelOut = new javax.swing.JLabel();

        new LoadForm();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jTextStatus = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PALM PRINT FEATURE COMPARISON");
        jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabelOriginal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOriginal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagePack/back320x240.png"))); // NOI18N
        jLabelOriginal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabelOriginal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelOriginalMouseClicked(evt);
            }
        });

        jLabelIn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagePack/back320x240.png"))); // NOI18N
        jLabelIn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabelIn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelInMouseClicked(evt);
            }
        });

        jLabelOut.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagePack/back320x240.png"))); // NOI18N
        jLabelOut.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLabelOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelOutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelIn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelOriginal)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelOut)
                    .addComponent(jLabelIn)
                    .addComponent(jLabelOriginal))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jButton1.setText("CANCEL");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setText("C A P T U R E");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton14.setText("C O M P A R E");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jTextStatus.setBackground(new java.awt.Color(204, 51, 0));
        jTextStatus.setEditable(false);
        jTextStatus.setForeground(new java.awt.Color(255, 255, 255));
        jTextStatus.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextStatus.setText("STATUS TEXT");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton14, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton14, jButton3});

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jProgressBar1, jTextStatus});

        jLabel2.setText("USER ID");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        ok = false;
        setVisible(false);

    }//GEN-LAST:event_jButton1ActionPerformed

    public double getM(int xOrder, int yOrder) {
        double m = 0;
        for (int y = windowHistRadius; y < hh - windowHistRadius; y++) {
            for (int x = windowHistRadius; x < ww - windowHistRadius; x++) {
                int pix = 0;
                if ((tempPixels[y][x] & 0xFF) < 30) {
                    pix = 1;
                } else {
                    pix = 0;
                }
                //double pix = (255 - (tempPixels[y][x] & 0xFF)) / 255.0;
                m += Math.pow(x, xOrder) * Math.pow(y, yOrder) * pix;
            }
        }
        return m;
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        SnapCapturer sp = new SnapCapturer(parent, biIn);
        sp.setVisible(true);
        jLabelIn.repaint();
        sp.dispose();

        if (sp.ok) {
            // reading pixels
            for (int yy = 0; yy < hh; yy++) {
                for (int xx = 0; xx < ww; xx++) {
                    tempPixels[yy][xx] = biIn.getRGB(xx, yy);
                    inPixels[yy][xx] = biIn.getRGB(xx, yy);
                }
            }
            g2dOut.clearRect(0, 0, ww, hh);
            jTextStatus.setText("Input Image Captured!");
            jLabelOut.repaint();
            
            //my code processing
            
             if (biIn == null) {
            return;
        }

        //GrayScale Code
        int r, g, b, gs;
        for (int y = 0; y < hh; y++) {
            for (int x = 0; x < ww; x++) {
                gs = (inPixels[y][x] & 0xFF);
                r = g = b = gs;
                tempPixels[y][x] = (r << 16) | (g << 8) | b;
            }
        }
        applyBlur();
        intensityAndSaturationEnhanceFast(windowHistRadius);

        // updating histPixels
        for (int y = 0; y < hh; y++) {
            for (int x = 0; x < ww; x++) {
                histPixels[y][x] = tempPixels[y][x];
                biOut.setRGB(x, y, tempPixels[y][x]);
            }
        }
        data = tempPixels;

        // moment calculation for weighted center
        double m[][] = new double[4][4];
        for (int x = 0; x < 4; x++) {
            for (int y = 0; y < 4; y++) {
                m[x][y] = getM(x, y);
            }
        }
        cxCurr = (int) (m[1][0] / m[0][0]);
        cyCurr = (int) (m[0][1] / m[0][0]);

        //System.out.println("CENTER POINT 1: [" + cxCurr + "," + cyCurr + "]");



        jTextStatus.setText("Image Processed!");
        jLabelOut.repaint();
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jLabelOriginalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelOriginalMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelOriginalMouseClicked

    private void jLabelInMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelInMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelInMouseClicked

    private void jLabelOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelOutMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabelOutMouseClicked

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed

        if (biOut == null) {
            JOptionPane.showMessageDialog(this, "Please capture Input Image!!!");
            return;
        }

        if (cxCurr == -1) {
            JOptionPane.showMessageDialog(this, "Please capture Input Image!");
            return;
        }
        
        if(jTextField1.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter User Id!");
            return;
        }

        if (parent.db.list.size() == 0) {
            JOptionPane.showMessageDialog(this, "Database Empty. Please register first.");
            return;
        }

        CompareTimerTask ctt = new CompareTimerTask();
        Timer timer = new Timer();
        timer.schedule(ctt, 100);

    }//GEN-LAST:event_jButton14ActionPerformed

    class CompareTimerTask extends TimerTask {

        public CompareTimerTask() {
        }

        public void run() {
              int total = parent.db.list.size();
              
            int minScores[] = new int[1];

            try {
                Thread.sleep(100);
            } catch (Exception e) {;
            }

            int minScoreOfAll = -1;
            int minScoreIndex = -1;

            jProgressBar1.setMaximum(parent.db.list.size());
            jProgressBar1.setValue(0);
            String currUser = jTextField1.getText();
            int userFoundIndex=-1;
            for (int i = 0; i < total; i++) {
                SingleUser su = parent.db.list.get(i);
                if (currUser.equals(parent.db.list.get(i).userID)) {
                    userFoundIndex=i;
                    break;
                }

            }
            if(userFoundIndex==-1)
            {
               JOptionPane.showMessageDialog(parent, "No Such user is found!!");
               return;
            }


          //  for (int i = 0; i < total; i++) {
                jProgressBar1.setIndeterminate(true);
                SingleUser su = parent.db.list.get(userFoundIndex );
                
                int distance = getDistance(su.cx, su.cy, cxCurr, cyCurr);
               //System.out.println("USER ID: " + su.userID + ", Distance: " + distance+"\tDB center:"+su.cx+","+su.cy+"\tcurrent center:"+cxCurr+","+cyCurr);


                if (distance < 150) {
                    //System.out.println("less than");
                    minScores[0] = -3;
                    //System.out.println(minScores[0]);
                    
                } else { 
                    //System.out.println("greater than");
                    minScores[0] = +3;
                    //System.out.println(minScores[0]);
                }



                    // load image to original
                    for (int y = 0; y < hh; y++) {
                        for (int x = 0; x < ww; x++) {
                            biOriginal.setRGB(x, y, su.data[y][x]);
                        }
                    }
                    jLabelOriginal.repaint();

                    //new MessageBox(parent, "Some Msg").setVisible(true);

                    minScores[0] = getMinScore();
                    System.out.println("User:"+su.userID+"\tminScore"+minScores[0]);


                   
               
          //  }

            jProgressBar1.setIndeterminate(false);
            jTextField1.setText("");
                       //17000000  // 29000000
                if ( minScores[0] >  17500000 ) {
                    // not good enough score 
                    userIndex = -1;
                    
                    JOptionPane.showMessageDialog(parent,"No Match Found!! ");
                    int response = JOptionPane.showConfirmDialog(parent, "Do you want to login using security question?", "Confirm",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (response == JOptionPane.NO_OPTION) {
                    setVisible(false);
                    } else if (response == JOptionPane.YES_OPTION) {
                    securityQuestion sq = new securityQuestion(parent);
                    setVisible(false);
                    sq.setVisible(true);
                    } else if (response == JOptionPane.CLOSED_OPTION) {
                    setVisible(false);
                    }
                    
                   
                    } else {
                    userIndex = minScoreIndex;
                    JOptionPane.showMessageDialog(parent," Match Found!! ");
                    
                
                }
            setVisible(false);
        }
    }

    public int getDistance(int x1, int y1, int x2, int y2) {
        return (int) (Math.sqrt((y2 - y1) * (y2 - y1)) + ((x2 - x1) * (x2 - x1)));
    }

    public int getMinScore() {
        // comparing two images
        int minScore = -1;
        int minOffsetX = 0, minOffsetY = 0;

        for (int offsetY = -30; offsetY <= 30; offsetY += 3) {
            for (int offsetX = -30; offsetX <= 30; offsetX += 3) {

                int currDiffScore = 0;
                int totalPoints = 0;
                for (int y = windowHistRadius; y < hh - windowHistRadius; y++) {
                    for (int x = windowHistRadius; x < ww - windowHistRadius; x++) {
                        int x1 = x;
                        int y1 = y;
                        int x2 = x + offsetX;
                        int y2 = y + offsetY;

                        if (x2 > windowHistRadius && x2 < ww - windowHistRadius && y2 > windowHistRadius && y2 < hh - windowHistRadius) {
                            totalPoints++;
                            currDiffScore += Math.pow((biOut.getRGB(x1, y1) & 0xFF) - (biOriginal.getRGB(x2, y2) & 0xFF), 2);
                        }
                    }
                }

                // adjust for unprocessed points...
                if (totalPoints != (61 * 61)) {
                    int diff = (61 * 61) - totalPoints;
                    int avg = currDiffScore / totalPoints;
                    currDiffScore += (avg * diff);
                }

                if (minScore == -1) {
                    minScore = currDiffScore;
                    minOffsetX = offsetX;
                    minOffsetY = offsetY;
                } else {
                    if (minScore > currDiffScore) {
                        minScore = currDiffScore;
                        minOffsetX = offsetX;
                        minOffsetY = offsetY;
                    }
                }
            }
        }
        //System.out.println("MIN SCORE: " + minScore + " OFFSETS : " + minOffsetX + " & " + minOffsetY);
        //System.out.println("getminscore:"+minScore);;
        return minScore;
    }

    public void applyBlur() {
        double gaussian[][] = GaussianKernel.calculateGaussian(5, 0.01);
        int col = 0, r, g, b, gs, sum;

        for (int y = 5; y < hh - 5; y++) {
            for (int x = 5; x < ww - 5; x++) {
                outPixels[y][x] = tempPixels[y][x];
            }
        }

        for (int y = 5; y < hh - 5; y++) {
            for (int x = 5; x < ww - 5; x++) {
                sum = 0;

                for (int yy = y - 2; yy <= y + 2; yy++) {
                    for (int xx = x - 2; xx <= x + 2; xx++) {
                        col = tempPixels[yy][xx];
                        // to take care of discarded pixels
                        gs = (tempPixels[yy][xx] >> 8) & 0xFF;
                        sum += (gs * gaussian[2 + (yy - y)][2 + (xx - x)]);
                    }
                }

                r = g = b = Math.min((int) sum, 255);
                outPixels[y][x] = (b | (g << 8) | (r << 16));
            }
        }

        for (int y = 0; y < hh; y++) {
            for (int x = 0; x < ww; x++) {
                tempPixels[y][x] = outPixels[y][x];
            }
        }
    }

    public void intensityAndSaturationEnhanceFast(int windowHistRadius) {
        int validPixelCount;
        long histogram[] = new long[256];
        long cummulative[] = new long[256];
        int intensity[] = new int[256];

        int r, g, b, gs, col;

        for (int y = 0; y < hh; y++) {
            for (int x = 0; x < ww; x++) {
                outPixels[y][x] = tempPixels[y][x];
            }
        }

        validPixelCount = 0;

        for (int y = windowHistRadius; y < hh - windowHistRadius; y++) {
            for (int x = windowHistRadius; x < ww - windowHistRadius; x++) {

                if (x == windowHistRadius) {
                    validPixelCount = 0;
                    for (int i = 0; i < 256; i++) {
                        histogram[i] = 0;
                    }

                    for (int yy = y - windowHistRadius; yy <= y + windowHistRadius; yy++) {
                        for (int xx = x - windowHistRadius; xx <= x + windowHistRadius; xx++) {
                            validPixelCount++;
                            g = (tempPixels[yy][xx] >> 8) & 0xFF;
                            histogram[g]++;
                        }
                    }
                } else {
                    for (int yy = y - windowHistRadius; yy <= y + windowHistRadius; yy++) {

                        int xx = (x - windowHistRadius) - 1;
                        validPixelCount--;
                        g = (tempPixels[yy][xx] >> 8) & 0xFF;
                        histogram[g]--;
                        xx = x + windowHistRadius;
                        validPixelCount++;
                        g = (tempPixels[yy][xx] >> 8) & 0xFF;
                        histogram[g]++;
                    }
                }

                gs = (tempPixels[y][x] >> 8) & 0xFF;

                double alpha = 255.0 / (validPixelCount);
                cummulative[0] = histogram[0];
                for (int i = 1; i <= gs; i++) {
                    cummulative[i] = cummulative[i - 1] + histogram[i];
                }
                intensity[gs] = (int) (cummulative[gs] * alpha);

                //g = (tempPixels[y][x] >> 8) & 0xFF;
                r = g = b = intensity[gs];
                col = (r << 16) | (g << 8) | b;

                outPixels[y][x] = col;
            }
        }

        for (int y = 0; y < hh; y++) {
            for (int x = 0; x < ww; x++) {
                tempPixels[y][x] = outPixels[y][x];
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelIn;
    private javax.swing.JLabel jLabelOriginal;
    private javax.swing.JLabel jLabelOut;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextStatus;
    // End of variables declaration//GEN-END:variables
}
